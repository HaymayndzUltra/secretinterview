import {
  BrowserWindow,
  app,
  ipcMain,
  desktopCapturer,
  session,
} from "electron";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
import Prism from "prismjs";
import axios from "axios";
import FormData from "form-data";
import fs from "fs";
import path from "path";
import { Buffer } from "buffer";
import { createClient, LiveTranscriptionEvents } from "@deepgram/sdk";
import LocalAsrManager from "./local-asr/LocalAsrManager";
import {
  LocalLlmClient,
  LocalLlmConfig,
  LocalLlmProvider,
  sanitizeMessages,
} from "./local-llm/LocalLlmClient";
import { LlmMessage } from "./types/llm";

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
import electronSquirrelStartup from "electron-squirrel-startup";

if (electronSquirrelStartup) {
  app.quit();
}

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    height: 1000,
    width: 1300,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
      webSecurity: false,
    },
  });

  mainWindow.webContents.session.webRequest.onHeadersReceived(
    (details, callback) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          "Content-Security-Policy": [
            "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' blob:; connect-src 'self' http://localhost:* https://localhost:* data:;",
          ],
        },
      });
    }
  );

  mainWindow.webContents.session.setPermissionRequestHandler(
    (webContents, permission, callback) => {
      if (permission === "media") {
        callback(true);
      } else {
        callback(false);
      }
    }
  );

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY + "#/main_window");
//  mainWindow.webContents.openDevTools();

  mainWindow.webContents.on("did-finish-load", () => {
    mainWindow.webContents.executeJavaScript(`
      console.log('Applied CSP:', document.querySelector('meta[http-equiv="Content-Security-Policy"]')?.getAttribute('content'));
    `);
  });
};

ipcMain.handle(
  "save-temp-audio-file",
  async (event, audioBuffer: ArrayBuffer) => {
    try {
      const tempFilePath = path.join(
        app.getPath("temp"),
        `temp_audio_${Date.now()}.wav`
      );
      fs.writeFileSync(tempFilePath, Buffer.from(audioBuffer));
      return tempFilePath;
    } catch (error) {
      throw error;
    }
  }
);

ipcMain.handle(
  "transcribe-audio-file",
  async (event, filePath: string, config) => {
    try {
      const formData = new FormData();
      formData.append("file", fs.createReadStream(filePath), "audio.wav");
      formData.append("model", "whisper-1");

      if (config.primaryLanguage && config.primaryLanguage !== "auto") {
        formData.append("language", config.primaryLanguage);
      }
      if (config.secondaryLanguage) {
        formData.append(
          "prompt",
          `This audio may contain ${config.primaryLanguage} and ${config.secondaryLanguage}.`
        );
      }

      const baseUrl = normalizeApiBaseUrl(config.api_base);
      const apiUrl = `${baseUrl}/audio/transcriptions`;
      const response = await axios.post(apiUrl, formData, {
        headers: {
          ...formData.getHeaders(),
          Authorization: `Bearer ${config.openai_key}`,
        },
        maxContentLength: Infinity,
        maxBodyLength: Infinity,
      });

      return response.data;
    } catch (error) {
      throw error;
    } finally {
      fs.unlinkSync(filePath);
    }
  }
);

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the
// dock icon is clicked and there are no other windows open.
app.on("window-all-closed", () => {
  localAsrManager.stopSession().catch((error) => {
    console.warn("Failed to stop local ASR on window close", error);
  });
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

import ElectronStore from "electron-store";

interface StoreSchema {
  config: Record<string, any>;
}

type TypedElectronStore = ElectronStore<StoreSchema> & {
  get: <K extends keyof StoreSchema>(key: K) => StoreSchema[K];
  set: <K extends keyof StoreSchema>(key: K, value: StoreSchema[K]) => void;
  clear: () => void;
};

const store = new ElectronStore<StoreSchema>() as TypedElectronStore;
const localAsrManager = new LocalAsrManager();

type StoredLocalLlmConfig = Partial<LocalLlmConfig> & {
  provider?: LocalLlmProvider;
};

interface AppConfig extends Record<string, any> {
  localLlm?: StoredLocalLlmConfig;
  primaryLanguage?: string;
  secondaryLanguage?: string;
  deepgram_api_key?: string;
  localAsr?: any;
  projectKnowledgeFile?: string;
}

const DEFAULT_LOCAL_LLM_CONFIG: StoredLocalLlmConfig = {
  provider: "ollama",
  baseUrl: "http://localhost:11434",
  model: "",
  temperature: 0.7,
  top_p: 0.9,
};

const DEFAULT_APP_CONFIG: AppConfig = {
  localLlm: DEFAULT_LOCAL_LLM_CONFIG,
  primaryLanguage: "auto",
  secondaryLanguage: "",
};

interface KnowledgeDocumentPayload {
  title: string;
  filename: string;
  content: string;
  layer: "permanent" | "project";
}

function mergeConfig(rawConfig: any): AppConfig {
  const normalized: AppConfig = {
    ...DEFAULT_APP_CONFIG,
    ...(rawConfig && typeof rawConfig === "object" ? rawConfig : {}),
  };

  normalized.localLlm = {
    ...DEFAULT_LOCAL_LLM_CONFIG,
    ...(normalized.localLlm || {}),
  };

  if (typeof normalized.primaryLanguage !== "string") {
    normalized.primaryLanguage = DEFAULT_APP_CONFIG.primaryLanguage;
  }

  if (typeof normalized.secondaryLanguage !== "string") {
    normalized.secondaryLanguage = DEFAULT_APP_CONFIG.secondaryLanguage;
  }

  return normalized;
}

function buildLocalLlmConfiguration(rawConfig?: StoredLocalLlmConfig): LocalLlmConfig | null {
  if (!rawConfig || typeof rawConfig !== "object") {
    return null;
  }

  const provider = (rawConfig.provider as LocalLlmProvider) || "openai-compatible";
  const baseUrl = typeof rawConfig.baseUrl === "string" ? rawConfig.baseUrl.trim() : "";
  const model = typeof rawConfig.model === "string" ? rawConfig.model.trim() : "";

  if (!baseUrl || !model) {
    return null;
  }

  return {
    provider,
    baseUrl,
    model,
    requestTimeoutMs: rawConfig.requestTimeoutMs ? Number(rawConfig.requestTimeoutMs) : undefined,
    temperature: rawConfig.temperature !== undefined ? Number(rawConfig.temperature) : undefined,
    top_p: rawConfig.top_p !== undefined ? Number(rawConfig.top_p) : undefined,
    max_tokens: rawConfig.max_tokens !== undefined ? Number(rawConfig.max_tokens) : undefined,
    extraParams:
      rawConfig.extraParams && typeof rawConfig.extraParams === "object"
        ? rawConfig.extraParams
        : undefined,
  };
}

function resolveKnowledgeRoot(): string {
  const candidates = [
    path.join(app.getAppPath(), "knowledge"),
    path.join(process.cwd(), "knowledge"),
    path.join(__dirname, "knowledge"),
    path.join(__dirname, "..", "knowledge"),
  ];

  for (const candidate of candidates) {
    if (fs.existsSync(candidate)) {
      return candidate;
    }
  }

  return candidates[0];
}

function resolveProjectKnowledgePath(rawPath?: string): string {
  const knowledgeRoot = resolveKnowledgeRoot();

  if (rawPath && typeof rawPath === "string" && rawPath.trim()) {
    return path.isAbsolute(rawPath)
      ? rawPath
      : path.join(knowledgeRoot, rawPath);
  }

  return path.join(knowledgeRoot, "project", "current_project.md");
}

function formatDocumentTitle(filename: string): string {
  return filename
    .replace(/\.md$/i, "")
    .replace(/[\-_]/g, " ")
    .replace(/\b\w/g, (char) => char.toUpperCase());
}

function readKnowledgeDocumentsFromDisk(projectFilePath?: string): {
  permanent: KnowledgeDocumentPayload[];
  project: KnowledgeDocumentPayload | null;
} {
  const knowledgeRoot = resolveKnowledgeRoot();
  const permanentDir = path.join(knowledgeRoot, "permanent");
  const permanentDocs: KnowledgeDocumentPayload[] = [];

  if (fs.existsSync(permanentDir)) {
    const files = fs
      .readdirSync(permanentDir)
      .filter((file) => file.endsWith(".md"))
      .sort();

    for (const file of files) {
      const absolutePath = path.join(permanentDir, file);
      try {
        const content = fs.readFileSync(absolutePath, "utf-8");
        permanentDocs.push({
          title: formatDocumentTitle(file),
          filename: file,
          content,
          layer: "permanent",
        });
      } catch (error) {
        console.error(`Failed to read knowledge document: ${absolutePath}`, error);
      }
    }
  }

  let projectDoc: KnowledgeDocumentPayload | null = null;
  const projectPath = projectFilePath || resolveProjectKnowledgePath();

  if (projectPath && fs.existsSync(projectPath)) {
    try {
      const content = fs.readFileSync(projectPath, "utf-8");
      const knowledgeRootRelative = path.relative(knowledgeRoot, projectPath) || path.basename(projectPath);
      projectDoc = {
        title: formatDocumentTitle(path.basename(projectPath)),
        filename: knowledgeRootRelative,
        content,
        layer: "project",
      };
    } catch (error) {
      console.error(`Failed to read project knowledge document: ${projectPath}`, error);
    }
  }

  return { permanent: permanentDocs, project: projectDoc };
}

function getMergedConfig(): AppConfig {
  const stored = store.get("config");
  return mergeConfig(stored);
}

try {
  const initialConfig = getMergedConfig();
  if (initialConfig && typeof initialConfig === "object") {
    localAsrManager.configure(initialConfig.localAsr);
  }
  store.set("config", initialConfig);
} catch (error) {
  console.error("Failed to initialize local ASR config", error);
}

ipcMain.handle("get-config", () => {
  return getMergedConfig();
});

ipcMain.handle("set-config", (event, config) => {
  const merged = mergeConfig(config);
  store.set("config", merged);
  if (merged && typeof merged === "object") {
    localAsrManager.configure(merged.localAsr);
  }
});

ipcMain.handle("load-knowledge-documents", async () => {
  try {
    const config = getMergedConfig();
    const projectPath = resolveProjectKnowledgePath(config.projectKnowledgeFile);
    return readKnowledgeDocumentsFromDisk(projectPath);
  } catch (error) {
    console.error("Failed to load knowledge documents", error);
    return {
      permanent: [],
      project: null,
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
});

ipcMain.handle("parsePDF", async (event, pdfBuffer) => {
  try {
    const pdf = require("pdf-parse");
    const data = await pdf(Buffer.from(pdfBuffer), {
      max: 0,
    });
    return { text: data.text };
  } catch (error) {
    return { error: "Failed to parse PDF: " + error.message };
  }
});

ipcMain.handle("process-image", async (event, imageData) => {
  try {
    const sharp = require("sharp");
    let image;
    if (imageData.startsWith("data:image")) {
      const base64Data = imageData.split(",")[1];
      const imageBuffer = Buffer.from(base64Data, "base64");
      image = sharp(imageBuffer);
    } else {
      throw new Error(
        "Invalid image input: expected Base64 encoded image data"
      );
    }
    const metadata = await image.metadata();
    return `Image size: ${metadata.width}x${metadata.height}, Format: ${metadata.format}`;
  } catch (error) {
    return { error: "Failed to process image: " + error.message };
  }
});

ipcMain.handle("highlightCode", async (event, code, language) => {
  return Prism.highlight(code, Prism.languages[language], language);
});

app.on("before-quit", () => {
  const config = getMergedConfig();
  store.set("config", config);
});

ipcMain.handle("get-system-audio-stream", async () => {
  try {
    const sources = await desktopCapturer.getSources({
      types: ["window", "screen"],
      fetchWindowIcons: false,
    });
    const audioSources = sources.filter(
      (source) =>
        source.name.toLowerCase().includes("sound") ||
        source.name.toLowerCase().includes("audio")
    );
    return audioSources.map((source) => source.id);
  } catch (error) {
    throw error;
  }
});

app.on("ready", () => {
  session.defaultSession.setDisplayMediaRequestHandler(
    (request, callback) => {
      desktopCapturer.getSources({ types: ["screen"] }).then((sources) => {
        callback({ video: sources[0], audio: "loopback" });
      });
    },
    { useSystemPicker: true }
  );

  ipcMain.handle(
    "transcribe-audio",
    async (event, audioBuffer: ArrayBuffer, config) => {
      try {
        const tempFilePath = path.join(
          app.getPath("temp"),
          `temp_audio_${Date.now()}.wav`
        );
        fs.writeFileSync(tempFilePath, Buffer.from(audioBuffer));

        const formData = new FormData();
        formData.append("file", fs.createReadStream(tempFilePath), {
          filename: "audio.wav",
          contentType: "audio/wav",
        });
        formData.append("model", "whisper-1");

        if (config.primaryLanguage && config.primaryLanguage !== "auto") {
          formData.append("language", config.primaryLanguage);
        }
        if (config.secondaryLanguage) {
          formData.append(
            "prompt",
            `This audio may contain ${config.primaryLanguage} and ${config.secondaryLanguage}.`
          );
        }

        const baseUrl = normalizeApiBaseUrl(config.api_base);
        const apiUrl = `${baseUrl}/audio/transcriptions`;
        const response = await axios.post(apiUrl, formData, {
          headers: {
            ...formData.getHeaders(),
            Authorization: `Bearer ${config.openai_key}`,
          },
          maxContentLength: Infinity,
          maxBodyLength: Infinity,
        });

        fs.unlinkSync(tempFilePath);

        return response.data;
      } catch (error) {
        throw error;
      }
    }
  );
});

ipcMain.handle("test-api-config", async (event, partialConfig) => {
  try {
    const merged = mergeConfig({ ...getMergedConfig(), ...partialConfig });
    const localLlmConfig = buildLocalLlmConfiguration(merged.localLlm);

    if (!localLlmConfig) {
      return {
        success: false,
        error: "Local LLM configuration is incomplete. Provide base URL and model.",
      };
    }

    const client = new LocalLlmClient(localLlmConfig);
    const messages: LlmMessage[] = [
      { role: "system", content: "You are running a diagnostics check." },
      { role: "user", content: "Reply with the single word OK if you received this message." },
    ];

    const result = await client.invoke({ messages: sanitizeMessages(messages) });

    if (!result.content || typeof result.content !== "string") {
      return { success: false, error: "Local LLM responded without usable text." };
    }

    return { success: true };
  } catch (error) {
    const message = error instanceof Error ? error.message : "Unknown error occurred";
    return { success: false, error: message };
  }
});

ipcMain.handle("invoke-local-llm", async (event, { messages, options, config: overrideConfig }) => {
  try {
    const merged = mergeConfig({ ...getMergedConfig(), ...(overrideConfig || {}) });
    const localLlmConfig = buildLocalLlmConfiguration(merged.localLlm);

    if (!localLlmConfig) {
      throw new Error("Local LLM is not configured. Set the base URL and model in Settings.");
    }

    if (!Array.isArray(messages)) {
      throw new Error("Messages payload must be an array.");
    }

    const client = new LocalLlmClient(localLlmConfig);
    const sanitizedMessages = sanitizeMessages(messages as LlmMessage[]);
    const result = await client.invoke({ messages: sanitizedMessages, options });

    return { content: result.content };
  } catch (error) {
    const message = error instanceof Error ? error.message : "Unknown error occurred";
    return { error: message };
  }
});

ipcMain.handle("get-desktop-sources", async () => {
  try {
    const sources = await desktopCapturer.getSources({
      types: ["window", "screen"],
    });
    return sources.map((source) => ({
      id: source.id,
      name: source.name,
      thumbnail: source.thumbnail.toDataURL(),
    }));
  } catch (error) {
    return [];
  }
});

function normalizeApiBaseUrl(url: string): string {
  if (!url) return "http://localhost:11434/v1";
  url = url.trim();
  if (!url.startsWith("http://") && !url.startsWith("https://")) {
    url = "https://" + url;
  }
  if (!url.endsWith("/v1")) {
    url = url.endsWith("/") ? url + "v1" : url + "/v1";
  }
  return url;
}

let deepgramConnection: any = null;

localAsrManager.on("transcript", (payload) => {
  const target = localAsrManager.getCurrentWebContents();
  if (target) {
    target.send("local-asr-transcript", payload);
  }
});

localAsrManager.on("status", (payload) => {
  const target = localAsrManager.getCurrentWebContents();
  if (target) {
    target.send("local-asr-status", payload);
  }
});

ipcMain.handle("start-deepgram", async (event, config) => {
  try {
    if (!config.deepgram_key) {
      throw new Error("Deepgram API key lose");
    }
    const deepgram = createClient(config.deepgram_key);
    deepgramConnection = deepgram.listen.live({
      punctuate: true,
      interim_results: false,
      model: "general",
      language: config.primaryLanguage || "en",
      encoding: "linear16",
      sample_rate: 16000,
      endpointing: 1500,
    });

    deepgramConnection.addListener(LiveTranscriptionEvents.Open, () => {
      event.sender.send("deepgram-status", { status: "open" });
    });

    deepgramConnection.addListener(LiveTranscriptionEvents.Close, () => {
      event.sender.send("deepgram-status", { status: "closed" });
    });

    deepgramConnection.addListener(
      LiveTranscriptionEvents.Transcript,
      (data: any) => {
        if (
          data &&
          data.is_final &&
          data.channel &&
          data.channel.alternatives &&
          data.channel.alternatives[0]
        ) {
          const transcript = data.channel.alternatives[0].transcript;
          if (transcript) {
            event.sender.send("deepgram-transcript", {
              transcript,
              is_final: true,
            });
          }
        }
      }
    );

    deepgramConnection.addListener(
      LiveTranscriptionEvents.Error,
      (err: any) => {
        event.sender.send("deepgram-error", err);
      }
    );

    await new Promise((resolve, reject) => {
      deepgramConnection.addListener(LiveTranscriptionEvents.Open, resolve);
      deepgramConnection.addListener(LiveTranscriptionEvents.Error, reject);
      setTimeout(() => reject(new Error("Deepgram timeout")), 10000);
    });

    return { success: true };
  } catch (error) {
    return { success: false, error: error.message };
  }
});

ipcMain.on("send-audio-to-deepgram", (event, audioData) => {
  if (deepgramConnection) {
    try {
      const buffer = Buffer.from(audioData);
      deepgramConnection.send(buffer);
    } catch (error) {
      console.error("failed send data to Deepgram :", error);
    }
  }
});

ipcMain.handle("stop-deepgram", () => {
  if (deepgramConnection) {
    deepgramConnection.finish();
    deepgramConnection = null;
  }
});

ipcMain.handle("check-local-asr", async () => {
  return localAsrManager.getStatus();
});

ipcMain.handle("start-local-asr", async (event, options) => {
  return localAsrManager.startSession(event.sender, {
    language: options?.language,
    sampleRate: options?.sampleRate ?? 16000,
  });
});

ipcMain.on("send-audio-to-local-asr", (event, audioData) => {
  const success = localAsrManager.sendAudioChunk(audioData);
  if (!success) {
    event.sender.send("local-asr-status", {
      status: "error",
      message: "Failed to send audio to local ASR engine",
    });
  }
});

ipcMain.handle("stop-local-asr", async () => {
  await localAsrManager.stopSession();
  return { success: true };
});

// Handle reading prompt template files
ipcMain.handle("read-prompt-template", async (event, templateName: string) => {
  try {
    const promptsDir = path.join(__dirname, 'prompts');
    const templatePath = path.join(promptsDir, `${templateName}.md`);
    
    // Check if file exists
    if (!fs.existsSync(templatePath)) {
      return { error: `Template '${templateName}' not found` };
    }
    
    const content = fs.readFileSync(templatePath, 'utf-8');
    return { content };
  } catch (error) {
    return { error: `Failed to read template: ${error.message}` };
  }
});

// Handle listing available prompt templates
ipcMain.handle("list-prompt-templates", async () => {
  try {
    const promptsDir = path.join(__dirname, 'prompts');
    
    // Check if prompts directory exists
    if (!fs.existsSync(promptsDir)) {
      return { templates: [] };
    }
    
    const files = fs.readdirSync(promptsDir);
    const templates = files
      .filter(file => file.endsWith('.md'))
      .map(file => ({
        name: file.replace('.md', ''),
        filename: file
      }));
    
    return { templates };
  } catch (error) {
    return { error: `Failed to list templates: ${error.message}` };
  }
});
