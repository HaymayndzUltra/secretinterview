import {
  BrowserWindow,
  app,
  ipcMain,
  desktopCapturer,
  session,
} from "electron";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
import Prism from "prismjs";
import OpenAI from "openai";
import axios from "axios";
import FormData from "form-data";
import fs from "fs";
import path from "path";
import { Buffer } from "buffer";
import { createClient, LiveTranscriptionEvents } from "@deepgram/sdk";
import LocalAsrClient from "./main/asr/LocalAsrClient";

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
import electronSquirrelStartup from "electron-squirrel-startup";

if (electronSquirrelStartup) {
  app.quit();
}

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    height: 1000,
    width: 1300,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
      webSecurity: false,
    },
  });

  mainWindow.webContents.session.webRequest.onHeadersReceived(
    (details, callback) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          "Content-Security-Policy": [
            "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' blob:; connect-src 'self' https://api.openai.com;",
          ],
        },
      });
    }
  );

  mainWindow.webContents.session.setPermissionRequestHandler(
    (webContents, permission, callback) => {
      if (permission === "media") {
        callback(true);
      } else {
        callback(false);
      }
    }
  );

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY + "#/main_window");
//  mainWindow.webContents.openDevTools();

  mainWindow.webContents.on("did-finish-load", () => {
    mainWindow.webContents.executeJavaScript(`
      console.log('Applied CSP:', document.querySelector('meta[http-equiv="Content-Security-Policy"]')?.getAttribute('content'));
    `);
  });
};

ipcMain.handle(
  "save-temp-audio-file",
  async (event, audioBuffer: ArrayBuffer) => {
    try {
      const tempFilePath = path.join(
        app.getPath("temp"),
        `temp_audio_${Date.now()}.wav`
      );
      fs.writeFileSync(tempFilePath, Buffer.from(audioBuffer));
      return tempFilePath;
    } catch (error) {
      throw error;
    }
  }
);

ipcMain.handle(
  "transcribe-audio-file",
  async (event, filePath: string, config) => {
    try {
      const formData = new FormData();
      formData.append("file", fs.createReadStream(filePath), "audio.wav");
      formData.append("model", "whisper-1");

      if (config.primaryLanguage && config.primaryLanguage !== "auto") {
        formData.append("language", config.primaryLanguage);
      }
      if (config.secondaryLanguage) {
        formData.append(
          "prompt",
          `This audio may contain ${config.primaryLanguage} and ${config.secondaryLanguage}.`
        );
      }

      const baseUrl = normalizeApiBaseUrl(config.api_base);
      const apiUrl = `${baseUrl}/audio/transcriptions`;
      const response = await axios.post(apiUrl, formData, {
        headers: {
          ...formData.getHeaders(),
          Authorization: `Bearer ${config.openai_key}`,
        },
        maxContentLength: Infinity,
        maxBodyLength: Infinity,
      });

      return response.data;
    } catch (error) {
      throw error;
    } finally {
      fs.unlinkSync(filePath);
    }
  }
);

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the
// dock icon is clicked and there are no other windows open.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

import ElectronStore from "electron-store";

interface LocalAsrSettings {
  enabled?: boolean;
  url?: string;
  auth_token?: string;
  chunk_ms?: number;
  handshake_timeout_ms?: number;
}

interface AppConfig {
  openai_key?: string;
  api_base?: string;
  gpt_model?: string;
  api_call_method?: string;
  primaryLanguage?: string;
  secondaryLanguage?: string;
  deepgram_api_key?: string;
  local_asr_config?: LocalAsrSettings;
}

interface StoreSchema {
  config: AppConfig;
}

type TypedElectronStore = ElectronStore<StoreSchema> & {
  get: <K extends keyof StoreSchema>(key: K) => StoreSchema[K];
  set: <K extends keyof StoreSchema>(key: K, value: StoreSchema[K]) => void;
  clear: () => void;
};

const store = new ElectronStore<StoreSchema>() as TypedElectronStore;

ipcMain.handle("get-config", () => {
  return store.get("config") || {};
});

ipcMain.handle("set-config", (_event, config: AppConfig) => {
  store.set("config", config);
});

ipcMain.handle("parsePDF", async (event, pdfBuffer) => {
  try {
    const pdf = require("pdf-parse");
    const data = await pdf(Buffer.from(pdfBuffer), {
      max: 0,
    });
    return { text: data.text };
  } catch (error) {
    return { error: "Failed to parse PDF: " + error.message };
  }
});

ipcMain.handle("process-image", async (event, imageData) => {
  try {
    const sharp = require("sharp");
    let image;
    if (imageData.startsWith("data:image")) {
      const base64Data = imageData.split(",")[1];
      const imageBuffer = Buffer.from(base64Data, "base64");
      image = sharp(imageBuffer);
    } else {
      throw new Error(
        "Invalid image input: expected Base64 encoded image data"
      );
    }
    const metadata = await image.metadata();
    return `Image size: ${metadata.width}x${metadata.height}, Format: ${metadata.format}`;
  } catch (error) {
    return { error: "Failed to process image: " + error.message };
  }
});

ipcMain.handle("highlightCode", async (event, code, language) => {
  return Prism.highlight(code, Prism.languages[language], language);
});

app.on("before-quit", () => {
  const config = store.get("config") || {};
  const apiInfo = {
    openai_key: config.openai_key || "",
    api_base: config.api_base || "",
    gpt_model: config.gpt_model || "",
    api_call_method: config.api_call_method || "direct",
    primaryLanguage: config.primaryLanguage || "en",
    deepgram_api_key: config.deepgram_api_key || "",
    secondaryLanguage: config.secondaryLanguage || "",
    local_asr_config: config.local_asr_config || {},
  };
  store.clear();
  store.set("config", apiInfo);
});

ipcMain.handle("get-system-audio-stream", async () => {
  try {
    const sources = await desktopCapturer.getSources({
      types: ["window", "screen"],
      fetchWindowIcons: false,
    });
    const audioSources = sources.filter(
      (source) =>
        source.name.toLowerCase().includes("sound") ||
        source.name.toLowerCase().includes("audio")
    );
    return audioSources.map((source) => source.id);
  } catch (error) {
    throw error;
  }
});

app.on("ready", () => {
  session.defaultSession.setDisplayMediaRequestHandler(
    (request, callback) => {
      desktopCapturer.getSources({ types: ["screen"] }).then((sources) => {
        callback({ video: sources[0], audio: "loopback" });
      });
    },
    { useSystemPicker: true }
  );

  ipcMain.handle(
    "transcribe-audio",
    async (event, audioBuffer: ArrayBuffer, config) => {
      try {
        const tempFilePath = path.join(
          app.getPath("temp"),
          `temp_audio_${Date.now()}.wav`
        );
        fs.writeFileSync(tempFilePath, Buffer.from(audioBuffer));

        const formData = new FormData();
        formData.append("file", fs.createReadStream(tempFilePath), {
          filename: "audio.wav",
          contentType: "audio/wav",
        });
        formData.append("model", "whisper-1");

        if (config.primaryLanguage && config.primaryLanguage !== "auto") {
          formData.append("language", config.primaryLanguage);
        }
        if (config.secondaryLanguage) {
          formData.append(
            "prompt",
            `This audio may contain ${config.primaryLanguage} and ${config.secondaryLanguage}.`
          );
        }

        const baseUrl = normalizeApiBaseUrl(config.api_base);
        const apiUrl = `${baseUrl}/audio/transcriptions`;
        const response = await axios.post(apiUrl, formData, {
          headers: {
            ...formData.getHeaders(),
            Authorization: `Bearer ${config.openai_key}`,
          },
          maxContentLength: Infinity,
          maxBodyLength: Infinity,
        });

        fs.unlinkSync(tempFilePath);

        return response.data;
      } catch (error) {
        throw error;
      }
    }
  );
});

ipcMain.handle("test-api-config", async (event, config) => {
  try {
    const axiosInstance = axios.create({
      baseURL: normalizeApiBaseUrl(config.api_base),
      headers: {
        Authorization: `Bearer ${config.openai_key}`,
        "Content-Type": "application/json",
      },
    });

    const response = await axiosInstance.post("/chat/completions", {
      model: config.gpt_model || "gpt-3.5-turbo",
      messages: [{ role: "user", content: "Hello, this is a test." }],
    });

    if (
      response.data.choices &&
      response.data.choices[0] &&
      response.data.choices[0].message
    ) {
      return { success: true };
    } else {
      return { success: false, error: "Unexpected API response structure" };
    }
  } catch (error) {
    if (axios.isAxiosError(error)) {
      if (error.response) {
        return {
          success: false,
          error: `Server responded with error: ${error.response.status} ${error.response.statusText}`,
        };
      } else if (error.request) {
        return {
          success: false,
          error:
            "No response received from server. Please check your network connection and API base URL.",
        };
      } else {
        return {
          success: false,
          error: `Error setting up the request: ${error.message}`,
        };
      }
    }
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error occurred",
    };
  }
});

ipcMain.handle("callOpenAI", async (event, { config, messages, signal }) => {
  try {
    const openai = new OpenAI({
      apiKey: config.openai_key,
      baseURL: normalizeApiBaseUrl(config.api_base),
    });

    const abortController = new AbortController();
    if (signal) {
      signal.addEventListener('abort', () => abortController.abort());
    }

    const response = await openai.chat.completions.create({
      model: config.gpt_model || "gpt-3.5-turbo",
      messages: messages,
    }, { signal: abortController.signal });

    if (
      !response.choices ||
      !response.choices[0] ||
      !response.choices[0].message
    ) {
      throw new Error("Unexpected API response structure");
    }
    return { content: response.choices[0].message.content };
  } catch (error) {
    if (error.name === "AbortError") {
      return { error: "AbortError" };
    }
    return { error: error.message || "Unknown error occurred" };
  }
});

ipcMain.handle("get-desktop-sources", async () => {
  try {
    const sources = await desktopCapturer.getSources({
      types: ["window", "screen"],
    });
    return sources.map((source) => ({
      id: source.id,
      name: source.name,
      thumbnail: source.thumbnail.toDataURL(),
    }));
  } catch (error) {
    return [];
  }
});

function normalizeApiBaseUrl(url: string): string {
  if (!url) return "https://api.openai.com/v1";
  url = url.trim();
  if (!url.startsWith("http://") && !url.startsWith("https://")) {
    url = "https://" + url;
  }
  if (!url.endsWith("/v1")) {
    url = url.endsWith("/") ? url + "v1" : url + "/v1";
  }
  return url;
}

let deepgramConnection: any = null;
let localAsrClient: LocalAsrClient | null = null;
let activeTranscriptionEngine: "local" | "deepgram" | null = null;
let transcriptionTarget: Electron.WebContents | null = null;

const emitStatus = (engine: "local" | "deepgram", status: "open" | "closed" | "connecting") => {
  transcriptionTarget?.send("transcription-status", { engine, status });
  if (engine === "deepgram") {
    transcriptionTarget?.send("deepgram-status", { status });
  }
};

const emitTranscript = (
  engine: "local" | "deepgram",
  payload: { transcript: string; isFinal?: boolean; confidence?: number }
) => {
  transcriptionTarget?.send("transcription-transcript", {
    engine,
    transcript: payload.transcript,
    is_final: payload.isFinal ?? false,
    isFinal: payload.isFinal,
    confidence: payload.confidence,
  });
  if (engine === "deepgram") {
    transcriptionTarget?.send("deepgram-transcript", {
      transcript: payload.transcript,
      is_final: payload.isFinal ?? true,
    });
  }
};

const emitError = (engine: "local" | "deepgram", error: Error | string) => {
  const normalizedError = error instanceof Error ? error : new Error(String(error));
  transcriptionTarget?.send("transcription-error", {
    engine,
    message: normalizedError.message,
  });
  if (engine === "deepgram") {
    transcriptionTarget?.send("deepgram-error", normalizedError);
  }
};

const cleanupLocalAsr = () => {
  if (localAsrClient) {
    localAsrClient.removeAllListeners();
    localAsrClient.dispose();
    localAsrClient = null;
  }
};

const cleanupDeepgram = () => {
  if (deepgramConnection) {
    deepgramConnection.finish();
    deepgramConnection = null;
  }
};

const startLocalTranscription = async (
  sender: Electron.WebContents,
  config: AppConfig
) => {
  const localConfig = config.local_asr_config;
  if (!localConfig?.enabled || !localConfig?.url) {
    throw new Error("Local ASR engine is not configured");
  }

  cleanupLocalAsr();
  cleanupDeepgram();

  transcriptionTarget = sender;

  localAsrClient = new LocalAsrClient({
    url: localConfig.url,
    sampleRate: 16000,
    authToken: localConfig.auth_token,
    language: config.primaryLanguage || "en",
    chunkMs: localConfig.chunk_ms ?? 160,
    handshakeTimeoutMs: localConfig.handshake_timeout_ms ?? 5000,
  });

  localAsrClient.on("status", ({ status }) => emitStatus("local", status));
  localAsrClient.on("transcript", (payload) => {
    if (payload.transcript) {
      emitTranscript("local", payload);
    }
  });
  localAsrClient.on("error", (error) => emitError("local", error));

  await localAsrClient.connect();
  activeTranscriptionEngine = "local";
  return { success: true, engine: "local" as const };
};

const startDeepgramTranscription = async (
  sender: Electron.WebContents,
  config: AppConfig & { deepgram_key?: string }
) => {
  const key = config.deepgram_key || config.deepgram_api_key;
  if (!key) {
    throw new Error("Deepgram API key missing");
  }

  cleanupDeepgram();
  cleanupLocalAsr();

  transcriptionTarget = sender;
  emitStatus("deepgram", "connecting");

  const deepgram = createClient(key);
  deepgramConnection = deepgram.listen.live({
    punctuate: true,
    interim_results: false,
    model: "general",
    language: config.primaryLanguage || "en",
    encoding: "linear16",
    sample_rate: 16000,
    endpointing: 1500,
  });

  deepgramConnection.addListener(LiveTranscriptionEvents.Open, () => {
    emitStatus("deepgram", "open");
  });

  deepgramConnection.addListener(LiveTranscriptionEvents.Close, () => {
    emitStatus("deepgram", "closed");
  });

  deepgramConnection.addListener(
    LiveTranscriptionEvents.Transcript,
    (data: any) => {
      if (
        data &&
        data.is_final &&
        data.channel &&
        data.channel.alternatives &&
        data.channel.alternatives[0]
      ) {
        const transcript = data.channel.alternatives[0].transcript;
        if (transcript) {
          emitTranscript("deepgram", {
            transcript,
            isFinal: true,
            confidence: data.channel.alternatives[0].confidence,
          });
        }
      }
    }
  );

  deepgramConnection.addListener(
    LiveTranscriptionEvents.Error,
    (err: any) => {
      emitError("deepgram", err instanceof Error ? err : new Error(String(err)));
    }
  );

  await new Promise((resolve, reject) => {
    deepgramConnection.addListener(LiveTranscriptionEvents.Open, resolve);
    deepgramConnection.addListener(LiveTranscriptionEvents.Error, reject);
    setTimeout(() => reject(new Error("Deepgram timeout")), 10000);
  });

  activeTranscriptionEngine = "deepgram";
  return { success: true, engine: "deepgram" as const };
};

type StartTranscriptionConfig = AppConfig & { deepgram_key?: string };

const attemptLocalThenFallback = async (
  sender: Electron.WebContents,
  config: StartTranscriptionConfig
) => {
  if (config.local_asr_config?.enabled && config.local_asr_config?.url) {
    try {
      return await startLocalTranscription(sender, config);
    } catch (error) {
      emitError("local", error instanceof Error ? error : new Error(String(error)));
      cleanupLocalAsr();
      if (!(config.deepgram_key || config.deepgram_api_key)) {
        throw error instanceof Error ? error : new Error(String(error));
      }
    }
  }
  return startDeepgramTranscription(sender, config);
};

const forwardAudioChunk = (audioData: ArrayBuffer) => {
  if (activeTranscriptionEngine === "local" && localAsrClient?.ready) {
    localAsrClient.sendAudio(audioData);
  } else if (activeTranscriptionEngine === "deepgram" && deepgramConnection) {
    try {
      const buffer = Buffer.from(audioData);
      deepgramConnection.send(buffer);
    } catch (error) {
      console.error("failed send data to Deepgram :", error);
    }
  }
};

ipcMain.handle("start-transcription", async (event, rawConfig: StartTranscriptionConfig) => {
  transcriptionTarget = event.sender;
  const config = rawConfig || {};
  try {
    const result = await attemptLocalThenFallback(event.sender, config);
    return result;
  } catch (error) {
    const targetEngine =
      activeTranscriptionEngine || (config.local_asr_config?.enabled ? "local" : "deepgram");
    emitError(targetEngine as "local" | "deepgram", error instanceof Error ? error : new Error(String(error)));
    return { success: false, error: error instanceof Error ? error.message : String(error) };
  }
});

ipcMain.handle("send-audio-chunk", async (_event, audioData) => {
  forwardAudioChunk(audioData);
});

ipcMain.handle("stop-transcription", () => {
  if (activeTranscriptionEngine === "local") {
    cleanupLocalAsr();
  } else if (activeTranscriptionEngine === "deepgram") {
    cleanupDeepgram();
  }
  activeTranscriptionEngine = null;
  transcriptionTarget = null;
});

// Backwards compatibility with legacy renderer calls
ipcMain.handle("start-deepgram", async (event, config: StartTranscriptionConfig) => {
  transcriptionTarget = event.sender;
  try {
    return await startDeepgramTranscription(event.sender, config);
  } catch (error) {
    emitError("deepgram", error instanceof Error ? error : new Error(String(error)));
    return { success: false, error: error instanceof Error ? error.message : String(error) };
  }
});

ipcMain.handle("send-audio-to-deepgram", async (_event, audioData) => {
  forwardAudioChunk(audioData);
});

ipcMain.handle("stop-deepgram", () => {
  cleanupDeepgram();
  if (activeTranscriptionEngine === "deepgram") {
    activeTranscriptionEngine = null;
  }
});

// Handle reading prompt template files
ipcMain.handle("read-prompt-template", async (event, templateName: string) => {
  try {
    const promptsDir = path.join(__dirname, 'prompts');
    const templatePath = path.join(promptsDir, `${templateName}.md`);
    
    // Check if file exists
    if (!fs.existsSync(templatePath)) {
      return { error: `Template '${templateName}' not found` };
    }
    
    const content = fs.readFileSync(templatePath, 'utf-8');
    return { content };
  } catch (error) {
    return { error: `Failed to read template: ${error.message}` };
  }
});

// Handle listing available prompt templates
ipcMain.handle("list-prompt-templates", async () => {
  try {
    const promptsDir = path.join(__dirname, 'prompts');
    
    // Check if prompts directory exists
    if (!fs.existsSync(promptsDir)) {
      return { templates: [] };
    }
    
    const files = fs.readdirSync(promptsDir);
    const templates = files
      .filter(file => file.endsWith('.md'))
      .map(file => ({
        name: file.replace('.md', ''),
        filename: file
      }));
    
    return { templates };
  } catch (error) {
    return { error: `Failed to list templates: ${error.message}` };
  }
});
